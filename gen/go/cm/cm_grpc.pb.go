// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0--rc1
// source: cm/cm.proto

package cmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContactManagerClient is the client API for ContactManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactManagerClient interface {
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error)
	GetContactByName(ctx context.Context, in *GetContactByNameRequest, opts ...grpc.CallOption) (*GetContactResponse, error)
	GetContactByEmail(ctx context.Context, in *GetContactByEmailRequest, opts ...grpc.CallOption) (*GetContactResponse, error)
	GetContactByPhone(ctx context.Context, in *GetContactByPhoneRequest, opts ...grpc.CallOption) (*GetContactResponse, error)
	GetContactById(ctx context.Context, in *GetContactByIdRequest, opts ...grpc.CallOption) (*GetContactResponse, error)
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error)
}

type contactManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewContactManagerClient(cc grpc.ClientConnInterface) ContactManagerClient {
	return &contactManagerClient{cc}
}

func (c *contactManagerClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error) {
	out := new(CreateContactResponse)
	err := c.cc.Invoke(ctx, "/ContactManager.ContactManager/CreateContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) GetContactByName(ctx context.Context, in *GetContactByNameRequest, opts ...grpc.CallOption) (*GetContactResponse, error) {
	out := new(GetContactResponse)
	err := c.cc.Invoke(ctx, "/ContactManager.ContactManager/GetContactByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) GetContactByEmail(ctx context.Context, in *GetContactByEmailRequest, opts ...grpc.CallOption) (*GetContactResponse, error) {
	out := new(GetContactResponse)
	err := c.cc.Invoke(ctx, "/ContactManager.ContactManager/GetContactByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) GetContactByPhone(ctx context.Context, in *GetContactByPhoneRequest, opts ...grpc.CallOption) (*GetContactResponse, error) {
	out := new(GetContactResponse)
	err := c.cc.Invoke(ctx, "/ContactManager.ContactManager/GetContactByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) GetContactById(ctx context.Context, in *GetContactByIdRequest, opts ...grpc.CallOption) (*GetContactResponse, error) {
	out := new(GetContactResponse)
	err := c.cc.Invoke(ctx, "/ContactManager.ContactManager/GetContactById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error) {
	out := new(DeleteContactResponse)
	err := c.cc.Invoke(ctx, "/ContactManager.ContactManager/DeleteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactManagerServer is the server API for ContactManager service.
// All implementations must embed UnimplementedContactManagerServer
// for forward compatibility
type ContactManagerServer interface {
	CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error)
	GetContactByName(context.Context, *GetContactByNameRequest) (*GetContactResponse, error)
	GetContactByEmail(context.Context, *GetContactByEmailRequest) (*GetContactResponse, error)
	GetContactByPhone(context.Context, *GetContactByPhoneRequest) (*GetContactResponse, error)
	GetContactById(context.Context, *GetContactByIdRequest) (*GetContactResponse, error)
	DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error)
	mustEmbedUnimplementedContactManagerServer()
}

// UnimplementedContactManagerServer must be embedded to have forward compatible implementations.
type UnimplementedContactManagerServer struct {
}

func (UnimplementedContactManagerServer) CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedContactManagerServer) GetContactByName(context.Context, *GetContactByNameRequest) (*GetContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactByName not implemented")
}
func (UnimplementedContactManagerServer) GetContactByEmail(context.Context, *GetContactByEmailRequest) (*GetContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactByEmail not implemented")
}
func (UnimplementedContactManagerServer) GetContactByPhone(context.Context, *GetContactByPhoneRequest) (*GetContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactByPhone not implemented")
}
func (UnimplementedContactManagerServer) GetContactById(context.Context, *GetContactByIdRequest) (*GetContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactById not implemented")
}
func (UnimplementedContactManagerServer) DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedContactManagerServer) mustEmbedUnimplementedContactManagerServer() {}

// UnsafeContactManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactManagerServer will
// result in compilation errors.
type UnsafeContactManagerServer interface {
	mustEmbedUnimplementedContactManagerServer()
}

func RegisterContactManagerServer(s grpc.ServiceRegistrar, srv ContactManagerServer) {
	s.RegisterService(&ContactManager_ServiceDesc, srv)
}

func _ContactManager_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContactManager.ContactManager/CreateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_GetContactByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).GetContactByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContactManager.ContactManager/GetContactByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).GetContactByName(ctx, req.(*GetContactByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_GetContactByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).GetContactByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContactManager.ContactManager/GetContactByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).GetContactByEmail(ctx, req.(*GetContactByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_GetContactByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).GetContactByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContactManager.ContactManager/GetContactByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).GetContactByPhone(ctx, req.(*GetContactByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_GetContactById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).GetContactById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContactManager.ContactManager/GetContactById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).GetContactById(ctx, req.(*GetContactByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContactManager.ContactManager/DeleteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactManager_ServiceDesc is the grpc.ServiceDesc for ContactManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ContactManager.ContactManager",
	HandlerType: (*ContactManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContact",
			Handler:    _ContactManager_CreateContact_Handler,
		},
		{
			MethodName: "GetContactByName",
			Handler:    _ContactManager_GetContactByName_Handler,
		},
		{
			MethodName: "GetContactByEmail",
			Handler:    _ContactManager_GetContactByEmail_Handler,
		},
		{
			MethodName: "GetContactByPhone",
			Handler:    _ContactManager_GetContactByPhone_Handler,
		},
		{
			MethodName: "GetContactById",
			Handler:    _ContactManager_GetContactById_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _ContactManager_DeleteContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cm/cm.proto",
}
